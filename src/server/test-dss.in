#!/usr/bin/perl -w
use strict;
use sort 'stable';

use Carp;
use Cwd;
use Data::Dumper;
use IO::Socket;
use Text::Table;
use Time::HiRes 'sleep';

@PERL5_MODULES_INC_UNSHIFT@;
use Lintel::ProcessManager;

use lib "@CMAKE_CURRENT_BINARY_DIR@/gen-perl";
use lib "$ENV{HOME}/projects/thrift/lib/perl/lib";

use Thrift::BinaryProtocol;
use Thrift::Socket;
use Thrift::BufferedTransport;

use DataSeriesServer;

$|=1;

my $debug = 0;

{
    my $sock = IO::Socket::INET->new(PeerAddr => 'localhost', PeerPort => 49476, Proto => 'tcp');
    warn "Server already running on port 49476, going to try using it."
        if defined $sock;
}
my $pm = new Lintel::ProcessManager();
print "Waiting for server...";
for(my $i=0; $i < 100; ++$i) {
    print "$i...";
    my $sock = IO::Socket::INET->new(PeerAddr => 'localhost', PeerPort => 49476, Proto => 'tcp');
    last if defined $sock;
    if ($i == 0) { # only start server if one isn't present.
        $pm->fork(cmd => "@CMAKE_CURRENT_BINARY_DIR@/data-series-server",
                  stdout => "server.log", stderr => 'STDOUT');
    }

    die "server not present" if $i > 50;
    sleep(0.1);
}

my $socket = new Thrift::Socket('localhost', 49476);
$socket->setRecvTimeout(1000*1000);
my $transport = new Thrift::BufferedTransport($socket, 4096, 4096);
my $protocol = new Thrift::BinaryProtocol($transport);
my $client = new DataSeriesServerClient($protocol);

$transport->open();
$client->ping();
print "Post Ping\n" if $debug;

testImportCSV();
testImportSql();
testImportData();
testHashJoin();
testSelect();
testProject();
testUpdate();
testSimpleStarJoin();
testStarJoin();
testUnion();
testSort();
testTransform();

eval { $client->shutdown(); }; # hide from exception of no reply

# print "--- $@\n"; 

$pm->wait(0) if $pm->nChildren() > 0;

sub importData ($$$) {
    my ($table_name, $table_desc, $rows, $quiet) = @_;

    confess "?" unless defined $rows;
    my $data_xml;
    if (ref $table_desc) {
        $data_xml = qq{<ExtentType name="$table_name" namespace="simpl.hpl.hp.com" version="1.0">\n};
        for (my $i=0; $i < @$table_desc; $i += 2) {
            my $name = $table_desc->[$i];
            my $desc = $table_desc->[$i+1];
            die "?" unless defined $desc;
            my $extra = $desc eq 'variable32' ? 'pack_unique="yes" ' : '';
            $data_xml .= qq{  <field type="$desc" name="$name" $extra/>\n};
        }
        $data_xml .= "</ExtentType>\n";
        print "Importing with $data_xml\n" if $debug;
    } else {
        $data_xml = $table_desc;
    }
    $client->importData($table_name, $data_xml, new TableData({ 'rows' => $rows }));
}

sub getTableData ($;$$) {
    my ($table_name, $max_rows, $where_expr) = @_;

    $max_rows ||= 1000;
    $where_expr ||= '';
    my $ret = eval { $client->getTableData($table_name, $max_rows, $where_expr); };
    if ($@) {
        print Dumper($@);
        die "fail";
    }
    return $ret;
}

sub printTable ($) {
    my ($table) = @_;
    my $table_refr = getTableData($table);

    my @columns;
    foreach my $col (@{$table_refr->{'columns'}}) {
        push(@columns, $col->{'name'} . "\n" . $col->{'type'});
    }

    my $tb = Text::Table->new(@columns);
    foreach my $row (@{$table_refr->{'rows'}}) {
        $tb->add(@{$row});
    }
    print "Table: $table \n\n";
    print $tb, "\n\n";
}

sub checkTable ($$$) {
    my ($table_name, $columns, $data) = @_;
    printTable($table_name) if $debug;
    my $table = getTableData($table_name, 10000000);

    confess "column count mismatch: " . scalar @$columns/2 . " != " . scalar @{$table->{columns}}
        unless @$columns/2 == @{$table->{columns}};
    for (my $i = 0; $i < @$columns/2; ++$i) {
        my ($name, $type) = ($columns->[2*$i], $columns->[2*$i+1]);
        my $col = $table->{columns}->[$i];
        die "name mismatch col $i: $name != $col->{name}" unless $name eq $col->{name};
        die "type mismatch col $i: $type != $col->{type}" unless $type eq $col->{type};
    }

    my $rows = $table->{rows};
    die scalar @$rows . " != " . scalar @$data unless @$rows == @$data;
    for (my $i = 0; $i < @$data; ++$i) {
        my $ra = $data->[$i];
        my $rb = $rows->[$i];
        die "?" unless @$ra == @$rb;
        for (my $j = 0; $j < @$ra; ++$j) {
            if ($ra->[$j] =~ /^(\d+\.\d+)$/o && $rb->[$j] =~ /^(\d+\.\d+)$/o) { 
                # floating point, doing approx check.
                my ($ta, $tb) = map { sprintf("%.10f", $_) } ($ra->[$j], $rb->[$j]);
                die "$i: ($ta != $tb) in " . join(",", @$ra) . " != " . join(",", @$rb)
                    unless $ta eq $tb;
            } else {
                die "$i: " . join(",", @$ra) . " != " . join(",", @$rb)
                    unless $ra->[$j] eq $rb->[$j];
            }
        }
    }
}


sub testImportCSV {
    print "Testing import-csv...";
    my $file = "@DataSeries_SOURCE_DIR@/check-data/csv2ds-1.csv";

    die "missing input file $file?" unless -f $file;
    my $csv_xml = <<'END';
<ExtentType name="test-csv2ds" namespace="simpl.hpl.hp.com" version="1.0">
  <field type="bool" name="bool" />
  <field type="byte" name="byte" />
  <field type="int32" name="int32" />
  <field type="int64" name="int64" />
  <field type="double" name="double" />
  <field type="variable32" name="variable32" pack_unique="yes" />
</ExtentType>
END

    $client->importCSVFiles([$file], $csv_xml, 'csv2ds-1', ",", "#");
    print "imported...";

    checkTable('csv2ds-1', [qw/bool bool byte byte int32 int32 int64 int64 double double
                               variable32 variable32/],
               [ [ 'true', 33,   1000,            56,       1,     'Hello, World' ],
                 ['false', 88, -15331, 1000000000000, 3.14159,     'I said "hello there."' ],
                 [ 'true', 10,     11,             5, 2.718281828, 'unquoted' ] ]);
    print "passed.\n";
}

# SQL test needs a host that hast this table installed
my $test_import_sql = <<'END';
create table dataseriesserver_sqlimport ( a int, b varchar(255) );
insert into dataseriesserver_sqlimport values (1, 'abc');
insert into dataseriesserver_sqlimport values (2, null);
insert into dataseriesserver_sqlimport values (null, 'xyz');
END

sub testImportSql {
    print "testing import-sql...";

    my $dsn;

    foreach my $s (qw/keyvalue-debian-x86-2.u.hpl.hp.com:3306/) {
        my ($server, $port) = ($s =~ /^(.+):(\d+)$/o);
        print "$server...";
        my $sock = IO::Socket::INET->new(PeerAddr => $server, PeerPort => $port, Proto => 'tcp',
                                         Timeout => 1);
        if (defined $sock) {
            print "found server...";
            $dsn = "DBI:mysql:database=test;host=$server";
            last;
        }
    }
    if (!defined $dsn && $ENV{USER} eq 'anderse') {
        # assume laptop, use localhost; can't do that in general as many people could have
        # mysql running on localhost.
        # TODO: use DBI to check if table is present.
        $dsn = "DBI:mysql:database=test";
    }
    unless (defined $dsn) {
        print "No server found, skipping.\n";
        return;
    }
    $client->importSQLTable($dsn, 'dataseriesserver_sqlimport', 'test-import-sql');

    checkTable('test-import-sql', [qw/a int32 b variable32/],
               [ [1, 'abc'], [2, ''], ['', 'xyz'] ]);
    print "passed.\n";
}

sub testImportData {
    print "Testing import-data...";
    my @columns = map { ($_, $_) } qw/bool byte int32 int64 double variable32/;
    my @data = ( [ 'on', 5, 1371, 111111, 11.12345, "abcde" ],
                 [ 'yes', 5, 1371, 111111, 11.6789, "1q2w3e" ],
# TODO: the next row tests the hash-map with a missing match, but fails if used in the star join.
# each of the tests should just manufacture the tables they want (easy now with importData()) so that
# changes to one test won't randomly break other tests.
#                            [ 'off', 6, 1385, 112034, 12.0, "mnop" ],
                 [ 'no', 7, 12345, 999999999999, 123.5, "fghij" ] );

    importData('import-test-1', \@columns, \@data);
    map { $_->[0] = 'true' if $_->[0] eq 'on' || $_->[0] eq 'yes';
          $_->[0] = 'false' if $_->[0] eq 'off' || $_->[0] eq 'no'; } @data;
    checkTable('import-test-1', \@columns, \@data);

    print "passed.\n";
}

sub testHashJoin {
    print "testing hash-join...";
    importData('join-data-1', [qw/int32 int32 variable32 variable32/],
               [ [  1371, "abcde" ],
                 [  1371, "1q2w3e" ],
                 [  1385, "mnop" ],
                 [ 12345, "fghij" ] ] );

    importData('join-data-2', [ 'join_int32' => 'int32', 'join_str' => 'variable32' ],
               [[ 1371, "123" ],
                [ 1371, "456" ],
                [ 1371, "789" ],
                [ 9321, "xyz" ],
                [ 12345, "fghij" ] ]);

    if ($debug) {
        print "\n----- Table A ----\n";
        printTable("join-data-1");
        print "\n---- Table B ----\n";
        printTable("join-data-2");
    }

    my @outputs = ( 'a.int32' => 'table-a:join-int32',
                    'a.variable32' => 'table-a:extra-variable32',
                    'b.join_int32' => 'table-b:join-int32',
                    'b.join_str' => 'table-b:extra-variable32' );

    print "a->b...";
    $client->hashJoin('join-data-1', 'join-data-2', 'test-hash-join-12',
                      { 'int32' => 'join_int32' }, {@outputs});
    if ($debug) {
        print "\n---- HashJoin Output ----\n";
        printTable("test-hash-join-12");
    }
    my @columns = qw/table-a:join-int32 int32 table-a:extra-variable32 variable32
                     table-b:join-int32 int32 table-b:extra-variable32 variable32/;
    my @data = ([ qw/1371   abcde   1371  123/ ],
                [ qw/1371   1q2w3e  1371  123/ ],
                [ qw/1371   abcde   1371  456/ ],
                [ qw/1371   1q2w3e  1371  456/ ],
                [ qw/1371   abcde   1371  789/ ],
                [ qw/1371   1q2w3e  1371  789/ ],
                [ qw/12345  fghij  12345  fghij/ ]);
    checkTable('test-hash-join-12', \@columns, \@data);

    print "b->a...";
    my %repl = ('a' => 'b', 'b' => 'a');
    @outputs = map { s/^([ab])\./$repl{$1}./o; $_ } @outputs;
    $client->hashJoin('join-data-2', 'join-data-1', 'test-hash-join-21',
                      { 'join_int32' => 'int32' }, {@outputs});
    checkTable('test-hash-join-12', \@columns, \@data);
    print "passed.\n";
}

sub testSelect {
    print "Testing select...";
    my @data = map { [ $_, int(rand(3)) ] } 1 .. 20;
    importData('select-in-1', [ qw/v int32 w int32/ ], \@data);

    $client->selectRows('select-in-1', 'select-out-1', "w == 1");
    my @data_out = grep($_->[1] == 1, @data);
    checkTable('select-out-1', [qw/v int32 w int32/], \@data_out);
    print "passed.\n";
}

sub testProject {
    print "Testing project...";
    importData('project-in-1', [ qw/1 int32 2 int32 3 int32/ ], # test numbers as column names
               [ [ 1, 99, 2 ], [ 3, 99, 4 ], [ 5, 99, 6 ] ]);

    $client->projectTable('project-in-1', 'project-out-1', [ qw/1 3/ ]);
    checkTable('project-out-1', [qw/1 int32 3 int32/],
               [ [ 1, 2 ], [ 3, 4 ], [ 5, 6 ] ]);
    print "passed.\n";
}

sub testUpdate {
    print "testing update...";
    my $base_fields = <<'END';
  <field type="variable32" name="type" pack_unique="yes" />
  <field type="int32" name="count" />
END

    my $base_xml = <<"END";
<ExtentType name="base-table" namespace="simpl.hpl.hp.com" version="1.0">
$base_fields
</ExtentType>
END

    my $update_xml = <<"END";
<ExtentType name="base-table" namespace="simpl.hpl.hp.com" version="1.0">
  <field type="byte" name="update-op" />
$base_fields
</ExtentType>
END

    $client->importData("base-table", $base_xml, new TableData
                        ({ 'rows' =>
                           [[ "abc", 5 ],
                            [ "def", 6 ],
                            [ "ghi", 0 ],
                            [ "jkl", 7 ], ]}));

    $client->importData("update-table", $update_xml, new TableData
                        ({ 'rows' =>
                           [[ 1, "aaa", 3 ],
                            [ 2, "abc", 9 ],
                            [ 3, "def", 0 ],
                            [ 2, "ghi", 5 ] ]}));

    $client->sortedUpdateTable('base-table', 'update-table', 'update-op', [ 'type' ]);
    checkTable('base-table', [qw/type variable32  count int32/],
               [ [ qw/aaa 3/ ], [ qw/abc 9/ ], [ qw/ghi 5/ ], [ qw/jkl 7/ ] ]);

    $client->importData("update-table", $update_xml, new TableData
                        ({ 'rows' =>
                           [[ 3, "aaa", 0 ],
                            [ 2, "mno", 1 ],
                            [ 1, "pqr", 2 ] ]}));
    $client->sortedUpdateTable('base-table', 'update-table', 'update-op', [ 'type' ]);
    checkTable('base-table', [qw/type variable32  count int32/],
               [ [ qw/abc 9/ ], [ qw/ghi 5/ ], [ qw/jkl 7/ ], [ qw/mno 1 /], [qw/pqr 2/] ]);

    print "passed.\n";
    # TODO: Add test for empty update..., and in general for empty extents in all the ops
}

sub testStarJoin {
    print "Testing star-join...";
    importData('star-join-fact', [qw/key int32 extra int64/],
               [ [ qw/1371 1/ ],
                 [ qw/1371 3/ ],
                 [ qw/999 2/ ] ]);

    importData('star-join-dimension', [qw/key_1 int32 key_2 int32
                                          val_1 variable32 val_2 variable32/],
               [[ 1371, 12345, "abc", "def" ],
                [ 12345, 1371, "ghi", "jkl" ],
                [ 999, 0, "mno", "pqr" ],
                [ 0, 999, "stu", "vwx" ]]);

    # Same table dim-int, is used to create 2 different dimensions. In practice we could have
    # different table and selectively use columns from each table.
    my $dim_1 = new Dimension({ dimension_name => 'dim_int_1',
                                source_table => 'star-join-dimension',
                                key_columns => ['key_1'],
                                value_columns => ['val_1', 'val_2'],
                                max_rows => 1000 });
    my $dim_2 = new Dimension({ dimension_name => 'dim_int_2',
                                source_table => 'star-join-dimension',
                                key_columns => ['key_2'],
                                value_columns => ['val_1', 'val_2'],
                                max_rows => 1000 });

    my $dfj_1 = new DimensionFactJoin({ dimension_name => 'dim_int_1',
                                        fact_key_columns => [ 'key' ],
                                        extract_values => { 'val_1' => 'dfj_1.dim1_val1' },
                                        missing_dimension_action => DFJ_MissingAction::DFJ_Unchanged });

    my $dfj_2 = new DimensionFactJoin({ dimension_name => 'dim_int_1',
                                        fact_key_columns => [ 'key' ],
                                        extract_values => { 'val_1' => 'dfj_2.dim1_val1',
                                                            'val_2' => 'dfj_2.dim1_val2' },
                                        missing_dimension_action => DFJ_MissingAction::DFJ_Unchanged });

    my $dfj_3 = new DimensionFactJoin({ dimension_name => 'dim_int_2',
                                        fact_key_columns => [ 'key' ],
                                        extract_values => { 'val_2' => 'dfj_3.dim2_val2' },
                                        missing_dimension_action => DFJ_MissingAction::DFJ_Unchanged });

    my $dfj_4 = new DimensionFactJoin({ dimension_name => 'dim_int_2',
                                        fact_key_columns => [ 'key' ],
                                        extract_values => { 'val_1' => 'dfj_4.dim2_val1' },
                                        missing_dimension_action => DFJ_MissingAction::DFJ_Unchanged });

    $client->starJoin('star-join-fact', [$dim_1, $dim_2], 'test-star-join',
                      { 'key' => 'f.key', 'extra' => 'f.extra'}, [$dfj_1, $dfj_2, $dfj_3, $dfj_4]);

    checkTable('test-star-join', [qw/f.extra int64 f.key int32 dfj_1.dim1_val1 variable32
                                    dfj_2.dim1_val1 variable32 dfj_2.dim1_val2 variable32
                                    dfj_3.dim2_val2 variable32 dfj_4.dim2_val1 variable32/],
               [ [ qw/1 1371 abc abc def jkl ghi/ ],
                 [ qw/3 1371 abc abc def jkl ghi/ ],
                 [ qw/2  999 mno mno pqr vwx stu/ ] ]);
    print "passed.\n";
}



sub testSimpleStarJoin {
    print "testing simple star join...";
    my $person_xml = <<'END';
<ExtentType name="person-details" namespace="simpl.hpl.hp.com" version="1.0">
  <field type="variable32" name="Name" pack_unique="yes" />
  <field type="variable32" name="Country" pack_unique="yes" />
  <field type="variable32" name="State" pack_unique="yes" />
</ExtentType>
END

    my $country_xml = <<'END';
<ExtentType name="country-details" namespace="simpl.hpl.hp.com" version="1.0">
  <field type="variable32" name="Name" pack_unique="yes" />
  <field type="variable32" name="Capital" pack_unique="yes" />
  <field type="variable32" name="Currency" pack_unique="yes" />
</ExtentType>
END

    my $state_xml = <<'END';
<ExtentType name="country-details" namespace="simpl.hpl.hp.com" version="1.0">
  <field type="variable32" name="Name" pack_unique="yes" />
  <field type="variable32" name="Capital" pack_unique="yes" />
  <field type="variable32" name="TimeZone" pack_unique="yes" />
</ExtentType>
END

    $client->importData("person-details", $person_xml, new TableData
                        ({ 'rows' =>
                           [[ "John", "United States", "California" ],
                            [ "Adam", "United States", "Colarado" ],
                            [ "Ram", "India", "Karnataka"],
                            [ "Shiva", "India", "Maharastra"]] }));

    $client->importData("country-details", $country_xml, new TableData
                        ({ 'rows' =>
                           [[ "India", "New Delhi", "INR" ],
                            [ "United States", "Washington, D.C.", "Dollar"]] }));

    $client->importData("state-details", $state_xml, new TableData
                        ({ 'rows' =>
                           [[ "California", "Sacramento", "PST (UTC.8), PDT (UTC.7)" ],
                            [ "Colarado", "Denver", "MST=UTC-07, MDT=UTC-06" ],
                            [ "Karnataka", "Bangalore", "IST" ],
                            [ "Maharastra", "Mumbai", "IST" ]] }));

    if ($debug) {
        printTable("person-details");
        printTable("country-details");
        printTable("state-details");
    }

    # Same table dim-int, is used to create 2 different dimensions. In practice we could have
    # different table and selectively use columns from each table.
    my $dim_country = new Dimension({ dimension_name => 'dim_country',
                                      source_table => 'country-details',
                                      key_columns => ['Name'],
                                      value_columns => ['Capital'],
                                      max_rows => 1000 });

    my $dim_state = new Dimension({ dimension_name => 'dim_state',
                                    source_table => 'state-details',
                                    key_columns => ['Name'],
                                    value_columns => ['Capital'],
                                    max_rows => 1000 });

    my $dfj_1 = new DimensionFactJoin({ dimension_name => 'dim_country',
                                        fact_key_columns => ['Country'],
                                        extract_values => { 'Capital' => 'CountryCapital' },
                                        missing_dimension_action => DFJ_MissingAction::DFJ_Unchanged });

    my $dfj_2 = new DimensionFactJoin({ dimension_name => 'dim_state',
                                        fact_key_columns => [ 'State' ],
                                        extract_values => { 'Capital' => 'StateCapital' },
                                        missing_dimension_action => DFJ_MissingAction::DFJ_Unchanged });

    $client->starJoin('person-details', [$dim_country, $dim_state], 'test-star-join',
                      { 'Name' => 'Name', 'Country' => 'Country', 'State' => 'State'}, [$dfj_1, $dfj_2]);

    printTable("test-star-join") if $debug;
    checkTable('test-star-join', [ qw/Country variable32
                                      Name variable32
                                      State variable32
                                      CountryCapital variable32
                                      StateCapital variable32/ ],
               [ [ 'United States', 'John', 'California', 'Washington, D.C.', 'Sacramento' ],
                 [ 'United States', 'Adam', 'Colarado', 'Washington, D.C.', 'Denver' ],
                 [ 'India', 'Ram', 'Karnataka', 'New Delhi', 'Bangalore' ],
                 [ 'India', 'Shiva', 'Maharastra', 'New Delhi', 'Mumbai' ] ]);
    print "passed.\n";
}

sub unionTable {
    return new UnionTable({ 'table_name' => $_[0], 'extract_values' => $_[1] });
}

sub testUnion {
    print "testing union...";
    # extra column tests discard; different names tests rename
    my @data1 = ( [ 100, "abc", 3, 1 ],
                  [ 2000, "ghi", 4, 4 ],
                  [ 3000, "def", 5, 5 ],
                  [ 12345, "ghi", 17, 7 ] );

    importData('union-input-1', [ 'col1' => 'int32', 'col2' => 'variable32', 'col3' => 'byte',
                                  'col4' => 'int32' ], \@data1);
    my @data2 = ( [ 100, "def", 2 ],
                  [ 2000, "def", 3 ],
                  [ 12345, "efg", 6 ],
                  [ 12345, "ghi", 8 ],
                  [ 12345, "jkl", 9 ],
                  [ 20000, "abc", 11 ] );
    importData('union-input-2', [ 'cola' => 'int32', 'colb' => 'variable32', 'colc' => 'int32' ],
               \@data2);

    my @data3 = ( [ 10, "zyw", 0 ],
                  [ 20000, "aaa", 10 ]);

    importData('union-input-3', [ 'colm' => 'int32', 'coln' => 'variable32', 'colo' => 'int32' ],
               \@data3);

    $client->unionTables([ unionTable('union-input-1', { 'col1' => 'int', 'col2' => 'string',
                                                         'col4' => 'order' }),
                           unionTable('union-input-2', { 'cola' => 'int', 'colb' => 'string',
                                                         'colc' => 'order' }),
                         unionTable('union-input-3', { 'colm' => 'int', 'coln' => 'string',
                                                       'colo' => 'order' })],
                         [ qw/int string/ ], 'union-output');

    my @data = map { [ $_->[0], $_->[3], $_->[1] ] } @data1;
    push(@data, map { [ $_->[0], $_->[2], $_->[1] ] } @data2, @data3);
    @data = sort { $a->[1] <=> $b->[1] } @data;
    #printTable("union-input-1");
    #printTable("union-input-2");
    #printTable("union-input-3");
    checkTable("union-output", [ qw/int int32   order int32   string variable32/ ], \@data);
    print "passed.\n";
}

sub testSort {
    my $sc_0 = new SortColumn({ 'column' => 'col0', 'sort_mode' => SortMode::SM_Decending });
    my $sc_1 = new SortColumn({ 'column' => 'col1', 'sort_mode' => SortMode::SM_Ascending });
    my $sc_2 = new SortColumn({ 'column' => 'col2', 'sort_mode' => SortMode::SM_Decending });

    print "sort test 1...";
    my @data = ( [ 5000, "ghi" ],
                 [ 5000, "abc" ],
                 [ 12345, "abc" ],
                 [ 12345, "ghi" ],
                 [ 3000, "defg" ],
                 [ 3000, "de" ],
                 [ 3000, "def" ] );

    importData('sort-1', [ 'col1' => 'int32', 'col2' => 'variable32' ], \@data);


    $client->sortTable('sort-1', 'sort-out-1', [ $sc_1, $sc_2 ]);
    @data = sort { $a->[0] != $b->[0] ? $a->[0] <=> $b->[0] : $b->[1] cmp $a->[1] } @data;
    checkTable('sort-out-1', [ 'col1' => 'int32', 'col2' => 'variable32' ], \@data);
    print "passed.\n";

    print "big sort test...gen...";
    ## Now with a big test; annoyingly slow on the perl client side, but there you go.
    ## Would be slightly better with 100k rows, but then it's really slow; you can verify
    ## it is doing multi-extent merging by running LINTEL_LOG_DEBUG=SortModule ./server
    my $nrows = 10000;
    my @sort2 = map { [ rand() > 0.5 ? "true" : "false", int(rand(100)),
                        int(rand(100)), int(rand(100000)) ] } (1..$nrows);

    print "import...";
    my @cols2 = ( 'col0' => 'bool', 'col1' => 'byte', 'col2' => 'int32', 'col3' => 'int64' );
    importData('sort-2', \@cols2, \@sort2);
    print "sort-server...";
    $client->sortTable('sort-2', 'sort-out-2',  [ $sc_1, $sc_0, $sc_2 ]);
    # printTable('sort-out-2');
    # We get lucky on booleans 0 < 1 and 'false' < 'true'
    print "sort-client...";
    my @sorted2 = sort { $a->[1] != $b->[1] ? $a->[1] <=> $b->[1]
                             : ($a->[0] ne $b->[0] ? $b->[0] cmp $a->[0] : $b->[2] <=> $a->[2]) }
        @sort2;
    die "?" unless @sorted2 == $nrows;
    print "check...";
    checkTable('sort-out-2', \@cols2, \@sorted2);
    print "passed.\n";
}

sub exprColumn {
    return new ExprColumn({ name => $_[0], type => $_[1], expr => $_[2] });
}

sub testTransform {
    print "testing expression transform...";
    my @data1 = ( [ 100, "abc", 3 ],
                  [ 2000, "ghi", 4000 ],
                  [ 3000, "def", 5 ],
                  [ 12345, "ghi", 17000 ] );

    importData('transform-input', [ 'col1' => 'int32', 'out.colv32' => 'variable32',
                                    'col3' => 'int64', ],
              \@data1);

    $client->transformTable('transform-input', 'transform-output',
                            [ exprColumn('a', 'int32', 'col1'),
                              exprColumn('b', 'int32', 'col1 + col3'),
                              exprColumn('c', 'bool', 'col1 > col3'),
                              exprColumn('d', 'int32', 'a + b'),
                              exprColumn('e', 'byte', 'in.col1 + 0'),
                              exprColumn('f', 'byte', 'e + c'),
                              exprColumn('g', 'int64', '12345'),

                              # 'rolling sum' calculations
                              exprColumn('h', 'int32', 'prev.h + 1'),
                              exprColumn('i', 'variable32', 'prev.i + ", " + out.colv32'),
                              exprColumn('j', 'int32', 'prev.j + col1'),
                              exprColumn('k', 'int32', '2 * prev.l + 1'),
                              exprColumn('l', 'int32', 'prev.k + 1'),
                              exprColumn('m', 'int32', 'col3'),
                              exprColumn('n', 'int32', 'm - prev.m'),
                              # Below operations are a really bad idea from a naming standpoint,
                              # but useful for testing correctness.

                              # input columns can be named out.* if they aren't in the output,
                              # and explicitly named.
                              exprColumn('col0', 'variable32', 'out.colv32 + in.out.colv32'),
                              # Referencing a not-yet-defined column get 0's.
                              exprColumn('col1', 'int32', 'col1 + out.col2 + 1'),
                              # Input and output columns can be named
                              exprColumn('col2', 'int32', 'in.col1 + out.col1'),
                              # Multiple output columns can be named
                              exprColumn('in.col4', 'int32', 'out.col1 + out.col2'),
                              # in. is valid as a prefix if there isn't a col4 in the input
                              exprColumn('out.col4', 'int32', 'in.col4 + 1'),
                              # and we can get at output columns in multiple ways
                              exprColumn('col5', 'int32', 'out.col4 + out.out.col4'),
                            ]);

    printTable('transform-output');

    my @out_data;

    my $h = 0;
    my $i = '';
    my $j = 0;
    my $k = 0;
    my $l = 0;
    my $m = 0;
    my $n = 0;
    foreach my $row (@data1) {
        my ($col1, $colv32, $col3) = @$row;
        my $a = $col1;
        my $b = $col1 + $col3;
        my $c = $col1 > $col3 ? 'true' : 'false';
        my $d = $a + $b;
        my $e = $col1 % 256;
        my $f = $e + ($c eq 'true' ? 1 : 0);
        my $g = 12345;
        $h += 1;
        $i = "$i, $colv32";
        $j += $col1;
        my $prev_k = $k;
        $k = 2*$l + 1;
        $l = $prev_k + 1;
        my $prev_m = $m;
        $m = $col3;
        $n = $m - $prev_m;
        my $o_col0 = $colv32 . $colv32;
        my $o_col1 = $col1 + 0 + 1;
        my $o_col2 = $col1 + $o_col1;
        my $o_in_col4 = $o_col1 + $o_col2;
        my $o_out_col4 = $o_in_col4 + 1;
        my $o_col5 = $o_out_col4 + $o_out_col4;

#        print "[ $a, $b, $c, $d, $e, $f, $g, $o_col0, $o_col1, $o_col2, $o_in_col4, $o_out_col4, $o_col5 ],\n";
        push (@out_data, [ $a, $b, $c, $d, $e, $f, $g, $h, $i, $j, $k, $l, $m, $n, $o_col0, $o_col1,
                           $o_col2, $o_in_col4, $o_out_col4, $o_col5 ]);
    }

    checkTable("transform-output", [ qw/a int32 b int32 c bool d int32 e byte f byte g int64
                                        h int32 i variable32 j int32 k int32 l int32 m int32 n int32
                                        col0 variable32 col1 int32 col2 int32 in.col4 int32
                                        out.col4 int32 col5 int32/ ], \@out_data);
    print "passed.\n";
}
