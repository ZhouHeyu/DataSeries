# -*- perl -*-

define

require 'fixtitle.pm';
sub basic_table {
    my $sth = sql_exec("select dataset, operation, group_count, mean_payload_bytes from xnfs_hostinfo_cube where group_seconds = 3600 and host is null and group_time is null and direction = 'send' and op_dir is null");
	
    my %data;
    my %datasets;
    while (my @row = $sth->fetchrow_array) { 
	my ($dataset, $operation, $count, $bytes) = @row;
	$operation ||= '*';
	$data{$operation}->{$dataset} = [$count, $bytes];
	$data{$operation}->{sum_count} += $count;
	$datasets{$dataset} = 1;
    }

    my @operations = sort { $data{$a}->{sum_count} <=> $data{$b}->{sum_count} } keys %data;

    my @datasets = sort keys %datasets;

    print " ";
    foreach my $dataset (@datasets) {
	print " & \\multicolumn{2}{c|}{$dataset}";
    }
    print " \\\\\n   operation";
    foreach my $dataset (@datasets) {
	print " &   Mops & bytes/op";
    }
    print " \\\\\n";
    foreach my $operation (@operations) {
	printf "%12s", $operation;
       
	foreach my $dataset (@datasets) {
	    $data{$operation}->{$dataset} ||= [0,0];
	    my($count, $bytes) = @{$data{$operation}->{$dataset}};

	    # account for request/response pairs by dividing by 2 for
	    # count and multiplying by 2 for bytes.  Imperfect, but so
	    # are all the other choices.

	    printf " & %9.3f & %5.0f", $count / (2*1000*1000), $bytes * 2;
	}
	print " \\\\\n";
    }
    
    
    return '';
}

sub plot_oprate {
    my($dataset) = @_;

    my $title = fixTitle($dataset);
    return "plot (group_time-(select min(86400*(floor(group_time/86400))) from xnfs_hostinfo_cube where dataset = '$dataset' and group_time is not null))/86400 as x, (group_count/2)/group_seconds as y from xnfs_hostinfo_cube where dataset = '$dataset' and group_seconds = 3600 and host is null and group_time is not null and direction = 'send' and operation is null and op_dir is null
plottitle _ $title
plotwith _ linespoints
";
}

sub plot_oprate_graph {
    return qq{
unplot
plot_oprate("nfs-1/set-12")
plot_oprate("nfs-2/set-2")
plot_oprate("nfs-1/set-5")
plot_oprate("nfs-2/set-5")
plotwith _ linespoints lw 2.5
gnuplot set ylabel "operations/s"
gnuplot set xlabel "day of trace"
gnuplot set title "daily usage cycles"
pngpsplot --mode=eps --fontsize=22 --nocolor daily-oprate
}
}

sub plot_ops_quantile {
    my ($dataset, $group_seconds, $operation) = @_;

    $group_seconds ||= 1;

    my $opcmp = defined $operation ? " = '$operation'" : "is null";
    my $optitle = defined $operation ? " $operation op" : "all ops";

    my $title = fixTitle($dataset);
    return "plot quantile as x, operations_per_second/2 as y from xnfs_hostinfo_rate_quantiles where dataset = '$dataset' and operation $opcmp and direction = 'send' and op_dir is null and host is null and group_seconds = $group_seconds and quantile < 1
plottitle _ $title, ${group_seconds}s interval, $optitle
plotwith _ linespoints
";
}

sub plot_allops_quantile_graphs {
    return q{
unplot
plot_ops_quantile('nfs-2/set-2',1)
plot_ops_quantile('nfs-2/set-2',3600)

plot_ops_quantile('nfs-2/set-5',1)
plot_ops_quantile('nfs-2/set-5',3600)
gnuplot set key 0.8,76000
gnuplot set xlabel "Quantile"
gnuplot set ylabel "Operations/second"
pngpsplot --mode=eps --fontsize=22 --nocolor allops-quantile-nfs-2

unplot
plot_ops_quantile('nfs-1/set-5',1)
plot_ops_quantile('nfs-1/set-5',3600)

plot_ops_quantile('nfs-1/set-12',1)
plot_ops_quantile('nfs-1/set-12',3600)

gnuplot set key 0.8,43000
gnuplot set xlabel "Quantile"
gnuplot set ylabel "Operations/second"
pngpsplot --mode=eps --fontsize=22 --nocolor allops-quantile-nfs-1

    }
};

sub plot_bw_quantile {
    my ($dataset, $group_seconds, $operation) = @_;

    $group_seconds ||= 1;

    my $opcmp = defined $operation ? " = '$operation'" : "is null";
    my $optitle = defined $operation ? " $operation bw" : "all bw";

    my $title = fixTitle($dataset);

    return "plot quantile as x, payload_bytes_per_second/(1024*1024) as y from xnfs_hostinfo_rate_quantiles where dataset = '$dataset' and operation $opcmp and direction = 'send' and op_dir is null and host is null and group_seconds = $group_seconds and quantile < 1
plottitle _ $title, ${group_seconds}s interval, $optitle
plotwith _ linespoints
";
}

sub plot_multi_ops_quantile {
    my($op, $key) = @_;
    $key ||= 'top left';

    return qq{
unplot
plot_ops_quantile('nfs-1/set-5', 1, '$op')
plot_ops_quantile('nfs-1/set-12', 1, '$op')
plot_ops_quantile('nfs-2/set-2', 1, '$op')
plot_ops_quantile('nfs-2/set-5', 1, '$op')
gnuplot set key $key
gnuplot set xlabel 'Quantile'
gnuplot set ylabel 'Operations/s'
gnuplot set title '$op/second'
pngpsplot --mode=eps --fontsize=22 --nocolor ops-$op
}
}

sub plot_multi_bw_quantile {
    my($op, $key) = @_;

    $key ||= 'top left';
    return qq{
unplot
plot_bw_quantile('nfs-1/set-5', 1, '$op')
plot_bw_quantile('nfs-1/set-12', 1, '$op')
plot_bw_quantile('nfs-2/set-2', 1, '$op')
plot_bw_quantile('nfs-2/set-5', 1, '$op')
gnuplot set key $key
gnuplot set xlabel 'Quantile'
gnuplot set ylabel 'MiB/s'
gnuplot set title '$op MiB/second'
pngpsplot --mode=eps --fontsize=22 --nocolor bw-$op
}
}

sub plot_all_multi {
    my @ret;

    foreach my $op (qw/read getattr write access lookup/) {
	push(@ret, "plot_multi_ops_quantile('$op')", "plot_multi_bw_quantile('$op')");
    }
    return join("\n", @ret, '');
}

sub count_host_servers_clients {
    return "
sql create or replace view tmp_nhic_count_1a as select distinct dataset, host from xnfs_hostinfo_cube where host is not null
sql create or replace view tmp_nhic_count_1b as select dataset, count(*) as hosts from tmp_nhic_count_1a group by dataset

sql create or replace view tmp_nhic_count_2a as select distinct dataset, host from xnfs_hostinfo_cube where host is not null and direction = 'send' and op_dir = 'request'
sql create or replace view tmp_nhic_count_2a_r as select distinct dataset, host from xnfs_hostinfo_cube where host is not null and direction = 'recv' and op_dir = 'response'
sql create or replace view tmp_nhic_count_2b as select dataset, count(*) as clients from tmp_nhic_count_2a group by dataset

sql create or replace view tmp_nhic_count_3a as select distinct dataset, host from xnfs_hostinfo_cube where host is not null and direction = 'recv' and op_dir = 'request'
sql create or replace view tmp_nhic_count_3a_r as select distinct dataset, host from xnfs_hostinfo_cube where host is not null and direction = 'send' and op_dir = 'response'
sql create or replace view tmp_nhic_count_3b as select dataset, count(*) as servers from tmp_nhic_count_3a group by dataset

sql create or replace view tmp_nhic_count_4a as select a.dataset, a.host from tmp_nhic_count_2a as a, tmp_nhic_count_3a as b where a.dataset = b.dataset and a.host = b.host
sql create or replace view tmp_nhic_count_4b as select dataset, count(*) as caches from tmp_nhic_count_4a group by dataset

select a.dataset, a.hosts, b.clients, c.servers from tmp_nhic_count_1b as a, tmp_nhic_count_2b as b, tmp_nhic_count_3b as c where a.dataset = b.dataset and b.dataset = c.dataset
select * from tmp_nhic_count_4b
";
}

enddefine

basic_table()
plot_oprate_graph()
plot_allops_quantile_graphs()

plot_all_multi()
plot_multi_bw_quantile('read', '0.77,330')
plot_multi_ops_quantile('getattr', '0.77,38000')

count_host_servers_clients()

# look for any cyclicality in read/write ratio (request from shepherd)

# sql create or replace view xnfs_rw_ratio as select a.dataset, a.host, a.group_time, a.group_count as read_count, b.group_count as write_count from xnfs_hostinfo_cube as a, xnfs_hostinfo_cube as b where a.dataset = b.dataset and a.host is null and b.host is null and a.group_time = b.group_time and a.group_seconds = 3600 and b.group_seconds = 3600 and a.operation = 'read' and b.operation = 'write' and a.direction = 'send' and b.direction = 'send' and a.op_dir = 'request' and b.op_dir = 'request'
# plot group_time as x, read_count / (read_count + write_count) as y from xnfs_rw_ratio where dataset = 'nfs-1/set-5'


history skipto asymmetric

## look at asymmetric packet capture (saw only packets in one direction)
# first sees packets, second doesn't. (in nfs-2/set-5)
# ds2txt --skip-index --skip-types --skip-all --where Trace::Network::IP 'source == -1062697791 && destination == -1062717409' --select Trace::Network::IP \* 000000-000499.ds | head
# ds2txt --skip-index --skip-types --skip-all --where Trace::Network::IP 'destination == -1062697791 && source == -1062717409' --select Trace::Network::IP \* 000000-000499.ds

count_host_servers_clients()

# select dataset, hex(host+pow(2,32)) from tmp_nhic_count_3a where dataset = 'nfs-2/set-5' and host not in (select host from tmp_nhic_count_3a_r where dataset = 'nfs-2/set-5')
# select dataset, host from tmp_nhic_count_3a where dataset = 'nfs-2/set-5' and host not in (select host from tmp_nhic_count_3a_r where dataset = 'nfs-2/set-5')
# C0A838{1F,20,21,22,23,24,25,26} # asymmetric hosts
# select hex(host+pow(2,32)) from tmp_nhic_count_3a where dataset = 'nfs-2/set-5'
# C0A8{33,37,38}xx # "servers"
# select distinct substring(hex(host+pow(2,32)),1,6) from tmp_nhic_count_2a where dataset = 'nfs-2/set-5'
# C0A8{1E,38,84}xx # "clients"

# example assymetric pair: have packets and nfs requests from c0a884c1 to c0a8381f, but not the reverse
# however, we do see it sending requests and recieving responses from c0a83338

history marker asymmetric
