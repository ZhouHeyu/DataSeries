At some point we want to change the underlying file format for dataseries.
The plan is to call this DSV2 as it would encompass changes that cannot
be made within the DSV1 format.

Changes under consideration for DSV1:
  * Change the extent type and extent index types to conform to the new
    naming convention
  * Add in a bunch of information about the stored extents into the extent
    index; see DataSeriesFile.C for the current proposal.

Changes under consideration for DSV2:
  * Consider allowing extent-type extents to occur anywhere in a file and using
    the index in order to find the type extents.  This would simplify writing
    dataseries files because it would mean we could automatically determine
    the types that should go into a file.  If we do this, it may be
    worth duplicating everything in the header to the trailer, and recording
    a type index offset also in the trailer so that we can do a single
    sequential read to pull in the two short bits, right now we have to read
    the front and the back.  Probably worth leaving the bits at the front as
    that would allow us to write dsrecover at some point.
  * Update the checksums that are used.  Current suggestion is to use SHA1
    for the packed checksum, and inlineable adler32/zlib-crc32/bjhash
    for the unpacked checksum.  As part of this, may want to seed one or
    both checksums with the checksum of the xml description to futher verify
    that we have a match between the type and the data.
  * Change the part of the extent header that stores the type as a string
    to storing the type as a 2-4 byte id this will reduce the overhead for
    having small extents, although it will require us to assign a permanant
    range for the built-in types and any future ones.  The id's would then
    be stored in the extent-type extent
  * Add in a part of the extent structure for storing transform rules.
    This will allow us to remove the transform rules from the extent type,
    and enable per-extent rules, which could lead to better compression.
    Shouldn't need a unpacked fixed size as record size * nrecords should
    be bigger than that.
  * Invert the semantics of the magic boolean for nullable such that 0
    == null, and 1 == not-null, then the initial memset on the extent
    will set all nullable extents to null, which is a more sane
    default.  Tricky as the Field accessor would have to change or track
    the underlying version.
