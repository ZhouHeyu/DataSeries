#
#  (c) Copyright 2005, Hewlett-Packard Development Company, LP
#
#  See the file named COPYING for license details
#


Initial checkin of the DataSeries, generic trace format work that I
described a few weeks ago.  It should build on Linux with gcc-2.95 and
HP-UX.  It has regression tests for most of the programs.

The doc directory contains the file-format presentation I gave.  The
regression-data directory contains all of the inputs currently needed
to do regression testing; based on the Ergastulum experience with
having a huge directory of regression test data, it seemed better to
keep it in a separate directory, rather than underneath the cpp directory.

The cpp directory contains the main source code.  The subdirectories
are discussed in the order src/base, src/module, src/process.

--------- src/base

src/base/DataSeriesFile.[CH]: The simple interfaces to a data series file 
  both as a source of extents and as a sink of extents; supports writing
  the headers and trailer for a file, and uses the Extent class to compress
  the extents for writing.

src/base/Extent.[CH]: The Extent class, other than using the new operator of 
  this class to create a new Extent, it is unlikely that you'll need to 
  directly access this class.  It contains the routines to pack and unpack
  extents.

src/base/ExtentField.[CH]: One of the more important includes, specifies all
  of the accessors to fields in an extent, currently Bool, Byte, Int32, Int64,
  Double, and Variable32 accessors.

src/base/ExtentSeries.[CH]: The primary class for iterating over a
  series of extents.  Supports updating extent field accessors when the
  extent changes using various rules of type compatibility; includes a default
  iterator for iterating over the records in an extent.

src/base/ExtentType.[CH]: The class for interpreting the XML type definitions,
  and converting it to something which can be more easily used.  Also 
  includes the xml definitions for re-constructing a new type from a bunch of
  old ones.  Finally, includes the extent type library, which is just a class
  for registering a collection of types.

src/base/GeneralField.[CH]: The class for working with generic
  properties of fields, for example, printing them out, or setting them
  from another field (the routines will do type conversion).  Includes
  generic versions of all of the field types.  There is currently a bug
  (check the comment in GeneralField.H to see if this is still true)
  that the set() routine doesn't correctly propogate nullness. Also
  includes routines a class for copying records from one series to
  another; it is unclear if this class is useful as the classes which
  needed similar functionality had to reimplement as they didn't do a
  direct copy.

--------- src/module

src/module/*NOTE*: this interface is completely subject to change, see
  the message in DataSeriesModule.H also; it is not yet clear what a good
  modular interface would be, and if we determine that an alternative is 
  better, then we we change the interface to that one and may not bother
  to provide backward compatibility.
		 
src/module/DataSeriesModule.[CH]: The basic modules, the virtual base
  class, which also defines a static routine to pull all the extents 
  out of a module, a SourceModule which just returns all the extents in 
  a collection of files, a FilterModule which only passes through extents
  matching a particular prefix, and an OutputModule, that is not really a
  normal DataSeriesModule in that it doesn't produce records or consume
  them, it's mostly to bundle up the standard way that we seem to be 
  writing data series files.  SourceModule and FilterModule have been mostly
  supplanted by IndexSourceModule.

src/module/DStoTextModule.[CH]: A module that just passes through it's 
  extents, and as a side effect writes out the extents to an output stream.
  The module supports flexible per-field printing specifications, and
  per-extent type headers and fields to print.

src/module/IndexSourceModule.[CH]: A module for returning all of the extents
  that match a particular prefix by using the index extent in a data series
  file to only read those extents.  This is somewhat faster than a 
  source/filter module for multi-extent-type files.  This module also allows
  the current position to be reset to make multiple passes over a file.

---------- src/process

src/process/commonargs.[CH]: routines for parsing the common command line
  arguments that specify allowed compression routines, and extent sizes.

src/process/ds2txt.C: main program to convert a data series to text; pretty
  much just uses he module now.

src/process/dssrt2txt.sh: shell script that specifies lots of options to the
  ds2txt run so that the output looks nicer

src/process/mi2ds.C: unimplemented

src/process/pssimple2ds.C: program for converting the "ps simple" text format
 generated by ps-trace-simplify.pl into a dataseries.

src/process/ps-trace-simplify.pl: convert a file with ps runs separated by
 dates into the "ps simple" text format

src/process/srt2dataseries.C: program to convert V1.1-V1.7 SRT files into 
 data series format.  It converts all of the fields, even though since most
 V1.7 files are derived from mi they don't have valid values for some fields.
 you can check a conversion using cmpsrtds

src/process/dsselect.C: a program that reads in a collection of data-series 
  files, selects a particular extent type from those files, and extracts 
  out a given list of fields to generate a new output file.

src/process/cmpsrtds.C: a program for comparing an srt and data series file,
  used for further verification that nothing was lost or incorrectly converted
  in transforming an srt file into data series.

src/process/hostioinventory.pl: a program for reading the output of 
  lvpvprocessusage.C, combining it with a static analysis of a sys_info file,
  and generating an appropriate spreadsheet for use by one of the migration 
  consultants.

src/process/lvpvprocessusage.C: a program for combining the output of an
  I/O trace and a ps trace to determine what processes were accessing which
  files on particular volumes and physical devices; one of the more complex
  data series applications for now.
