    // fields for Batch::LSF::Grizzly (ns = ssd.hpl.hp.com, version = 1.0)
    Variable32Field cluster_name;
    BoolField job_name_unpacked;
    BoolField directory_path_unpacked;
    BoolField directory_name_info_matched;
    Int32Field meta_id;
    Variable32Field production;
    Variable32Field sequence;
    Variable32Field shot;
    Variable32Field task;
    Variable32Field object;
    Variable32Field subtask;
    Variable32Field jobname_username;
    Variable32Field frames;
    Int32Field start_frame;
    Int32Field end_frame;
    Int32Field nframes;
    Int32Field frame_step;
    Int32Field job_parallel_limit;
    Variable32Field command;
    Variable32Field command_path;
    Variable32Field command_name;
    DoubleField job_resolution;
    Int32Field job_frame;
    Int32Field created;
    Int32Field job_id;
    Int32Field job_idx;
    Variable32Field username;
    Int32Field user_id;
    Int32Field event_time;
    Int32Field submit_time;
    Int32Field req_start_time;
    Int32Field start_time;
    Int32Field end_time;
    Variable32Field queue;
    Variable32Field email;
    Variable32Field status;
    Int32Field status_int;
    Variable32Field team;
    Int32Field exit_code;
    DoubleField user_time;
    DoubleField system_time;
    DoubleField cpu_time;
    Int64Field max_memory;
    Int64Field max_swap;
    Variable32Field exec_host;
    Variable32Field exec_host_group;
    // initializers
    cluster_name(series, "cluster_name"),
    job_name_unpacked(series, "job_name_unpacked"),
    directory_path_unpacked(series, "directory_path_unpacked"),
    directory_name_info_matched(series, "directory_name_info_matched", Field::flag_nullable),
    meta_id(series, "meta_id", Field::flag_nullable),
    production(series, "production", Field::flag_nullable),
    sequence(series, "sequence", Field::flag_nullable),
    shot(series, "shot", Field::flag_nullable),
    task(series, "task", Field::flag_nullable),
    object(series, "object", Field::flag_nullable),
    subtask(series, "subtask", Field::flag_nullable),
    jobname_username(series, "jobname_username", Field::flag_nullable),
    frames(series, "frames", Field::flag_nullable),
    start_frame(series, "start_frame", Field::flag_nullable),
    end_frame(series, "end_frame", Field::flag_nullable),
    nframes(series, "nframes", Field::flag_nullable),
    frame_step(series, "frame_step", Field::flag_nullable),
    job_parallel_limit(series, "job_parallel_limit", Field::flag_nullable),
    command(series, "command"),
    command_path(series, "command_path"),
    command_name(series, "command_name"),
    job_resolution(series, "job_resolution", Field::flag_nullable),
    job_frame(series, "job_frame", Field::flag_nullable),
    created(series, "created"),
    job_id(series, "job_id"),
    job_idx(series, "job_idx", Field::flag_nullable),
    username(series, "username"),
    user_id(series, "user_id"),
    event_time(series, "event_time"),
    submit_time(series, "submit_time"),
    req_start_time(series, "req_start_time", Field::flag_nullable),
    start_time(series, "start_time", Field::flag_nullable),
    end_time(series, "end_time", Field::flag_nullable),
    queue(series, "queue"),
    email(series, "email", Field::flag_nullable),
    status(series, "status"),
    status_int(series, "status_int"),
    team(series, "team"),
    exit_code(series, "exit_code"),
    user_time(series, "user_time"),
    system_time(series, "system_time"),
    cpu_time(series, "cpu_time"),
    max_memory(series, "max_memory", Field::flag_nullable),
    max_swap(series, "max_swap", Field::flag_nullable),
    exec_host(series, "exec_host", Field::flag_nullable),
    exec_host_group(series, "exec_host_group", Field::flag_nullable),

    // fields for DataSeries: ExtentIndex (ns = , version = )
    Int64Field offset;
    Variable32Field extenttype;
    // initializers
    offset(series, "offset"),
    extenttype(series, "extenttype"),

    // fields for DataSeries: XmlType (ns = , version = )
    Variable32Field xmltype;
    // initializers
    xmltype(series, "xmltype"),

/// analysis module/program for Batch::LSF::Grizzly (ns = ssd.hpl.hp.com, version = 1.0)
#include <DataSeries/PrefetchBufferModule.H>
#include <DataSeries/RowAnalysisModule.H>
#include <DataSeries/SequenceModule.H>
#include <DataSeries/TypeIndexModule.H>

class Batch__LSF__GrizzlyAnalysis : public RowAnalysisModule {
public:
    Batch__LSF__GrizzlyAnalysis(DataSeriesModule &source)
        : RowAnalysisModule(source),
        cluster_name(series, "cluster_name"),
        job_name_unpacked(series, "job_name_unpacked"),
        directory_path_unpacked(series, "directory_path_unpacked"),
        directory_name_info_matched(series, "directory_name_info_matched", Field::flag_nullable),
        meta_id(series, "meta_id", Field::flag_nullable),
        production(series, "production", Field::flag_nullable),
        sequence(series, "sequence", Field::flag_nullable),
        shot(series, "shot", Field::flag_nullable),
        task(series, "task", Field::flag_nullable),
        object(series, "object", Field::flag_nullable),
        subtask(series, "subtask", Field::flag_nullable),
        jobname_username(series, "jobname_username", Field::flag_nullable),
        frames(series, "frames", Field::flag_nullable),
        start_frame(series, "start_frame", Field::flag_nullable),
        end_frame(series, "end_frame", Field::flag_nullable),
        nframes(series, "nframes", Field::flag_nullable),
        frame_step(series, "frame_step", Field::flag_nullable),
        job_parallel_limit(series, "job_parallel_limit", Field::flag_nullable),
        command(series, "command"),
        command_path(series, "command_path"),
        command_name(series, "command_name"),
        job_resolution(series, "job_resolution", Field::flag_nullable),
        job_frame(series, "job_frame", Field::flag_nullable),
        created(series, "created"),
        job_id(series, "job_id"),
        job_idx(series, "job_idx", Field::flag_nullable),
        username(series, "username"),
        user_id(series, "user_id"),
        event_time(series, "event_time"),
        submit_time(series, "submit_time"),
        req_start_time(series, "req_start_time", Field::flag_nullable),
        start_time(series, "start_time", Field::flag_nullable),
        end_time(series, "end_time", Field::flag_nullable),
        queue(series, "queue"),
        email(series, "email", Field::flag_nullable),
        status(series, "status"),
        status_int(series, "status_int"),
        team(series, "team"),
        exit_code(series, "exit_code"),
        user_time(series, "user_time"),
        system_time(series, "system_time"),
        cpu_time(series, "cpu_time"),
        max_memory(series, "max_memory", Field::flag_nullable),
        max_swap(series, "max_swap", Field::flag_nullable),
        exec_host(series, "exec_host", Field::flag_nullable),
        exec_host_group(series, "exec_host_group", Field::flag_nullable)
    {
    }

    virtual ~Batch__LSF__GrizzlyAnalysis() { }

    virtual void processRow() {
        // Here you put your code for dealing with each row, using the fields
        // declared below.
    }

    virtual void printResult() {
        // Here you put your code to print out your result, if so desired.
    }

private:
    Variable32Field cluster_name;
    BoolField job_name_unpacked;
    BoolField directory_path_unpacked;
    BoolField directory_name_info_matched;
    Int32Field meta_id;
    Variable32Field production;
    Variable32Field sequence;
    Variable32Field shot;
    Variable32Field task;
    Variable32Field object;
    Variable32Field subtask;
    Variable32Field jobname_username;
    Variable32Field frames;
    Int32Field start_frame;
    Int32Field end_frame;
    Int32Field nframes;
    Int32Field frame_step;
    Int32Field job_parallel_limit;
    Variable32Field command;
    Variable32Field command_path;
    Variable32Field command_name;
    DoubleField job_resolution;
    Int32Field job_frame;
    Int32Field created;
    Int32Field job_id;
    Int32Field job_idx;
    Variable32Field username;
    Int32Field user_id;
    Int32Field event_time;
    Int32Field submit_time;
    Int32Field req_start_time;
    Int32Field start_time;
    Int32Field end_time;
    Variable32Field queue;
    Variable32Field email;
    Variable32Field status;
    Int32Field status_int;
    Variable32Field team;
    Int32Field exit_code;
    DoubleField user_time;
    DoubleField system_time;
    DoubleField cpu_time;
    Int64Field max_memory;
    Int64Field max_swap;
    Variable32Field exec_host;
    Variable32Field exec_host_group;
};

int
main(int argc, char *argv[]) 
{
    TypeIndexModule source("Batch::LSF::Grizzly");
    PrefetchBufferModule *prefetch
	= new PrefetchBufferModule(source, 64*1024*1024);

    INVARIANT(argc >= 2 && strcmp(argv[1], "-h") != 0,
	      boost::format("Usage: %s <file...>\n") % argv[0]);

    for(int i = 1; i < argc; ++i) {
	source.addSource(argv[i]);
    }

    SequenceModule seq(prefetch);
    
    seq.addModule(new Batch__LSF__GrizzlyAnalysis(seq.tail()));
    
    seq.getAndDelete();
    RowAnalysisModule::printAllResults(seq);
    return 0;
}


/// analysis module/program for DataSeries: ExtentIndex (ns = , version = )
#include <DataSeries/PrefetchBufferModule.H>
#include <DataSeries/RowAnalysisModule.H>
#include <DataSeries/SequenceModule.H>
#include <DataSeries/TypeIndexModule.H>

class DataSeries__ExtentIndexAnalysis : public RowAnalysisModule {
public:
    DataSeries__ExtentIndexAnalysis(DataSeriesModule &source)
        : RowAnalysisModule(source),
        offset(series, "offset"),
        extenttype(series, "extenttype")
    {
    }

    virtual ~DataSeries__ExtentIndexAnalysis() { }

    virtual void processRow() {
        // Here you put your code for dealing with each row, using the fields
        // declared below.
    }

    virtual void printResult() {
        // Here you put your code to print out your result, if so desired.
    }

private:
    Int64Field offset;
    Variable32Field extenttype;
};

int
main(int argc, char *argv[]) 
{
    TypeIndexModule source("DataSeries: ExtentIndex");
    PrefetchBufferModule *prefetch
	= new PrefetchBufferModule(source, 64*1024*1024);

    INVARIANT(argc >= 2 && strcmp(argv[1], "-h") != 0,
	      boost::format("Usage: %s <file...>\n") % argv[0]);

    for(int i = 1; i < argc; ++i) {
	source.addSource(argv[i]);
    }

    SequenceModule seq(prefetch);
    
    seq.addModule(new DataSeries__ExtentIndexAnalysis(seq.tail()));
    
    seq.getAndDelete();
    RowAnalysisModule::printAllResults(seq);
    return 0;
}


/// analysis module/program for DataSeries: XmlType (ns = , version = )
#include <DataSeries/PrefetchBufferModule.H>
#include <DataSeries/RowAnalysisModule.H>
#include <DataSeries/SequenceModule.H>
#include <DataSeries/TypeIndexModule.H>

class DataSeries__XmlTypeAnalysis : public RowAnalysisModule {
public:
    DataSeries__XmlTypeAnalysis(DataSeriesModule &source)
        : RowAnalysisModule(source),
        xmltype(series, "xmltype")
    {
    }

    virtual ~DataSeries__XmlTypeAnalysis() { }

    virtual void processRow() {
        // Here you put your code for dealing with each row, using the fields
        // declared below.
    }

    virtual void printResult() {
        // Here you put your code to print out your result, if so desired.
    }

private:
    Variable32Field xmltype;
};

int
main(int argc, char *argv[]) 
{
    TypeIndexModule source("DataSeries: XmlType");
    PrefetchBufferModule *prefetch
	= new PrefetchBufferModule(source, 64*1024*1024);

    INVARIANT(argc >= 2 && strcmp(argv[1], "-h") != 0,
	      boost::format("Usage: %s <file...>\n") % argv[0]);

    for(int i = 1; i < argc; ++i) {
	source.addSource(argv[i]);
    }

    SequenceModule seq(prefetch);
    
    seq.addModule(new DataSeries__XmlTypeAnalysis(seq.tail()));
    
    seq.getAndDelete();
    RowAnalysisModule::printAllResults(seq);
    return 0;
}


class DSModule : public DataSeriesModule {
public:
    DSModule(DataSeriesSource &_source_dsextent)
       : source_dsextent(_source_dsextent),
         dsextent_offset(dsextent_series, "offset"),
         dsextent_extenttype(dsextent_series, "extenttype")
    { }
 
    ~DSModule() { }

    virtual Extent *getExtent() {
        // Code to process extent(s) and return an extent when called
    }

    DataSeriesModule &source_dsextent;
    ExtentSeries dsextent_series;
    Int64Field dsextent_offset;
    Variable32Field dsextent_extenttype;
};

