/*
   (c) Copyright 2009, Hewlett-Packard Development Company, LP

   See the file named COPYING for license details
*/

/** @file
    A module which uses the min/max index generated by dsextentindex to 
    pick out the appropriate extents. Unlike MinMaxIndex, maintains index 
    in memory, and only builds index on a single value.  
*/

#ifndef DATASERIES_SORTED_INDEX_MODULE_HPP
#define DATASERIES_SORTED_INDEX_MODULE_HPP

#include <boost/shared_ptr.hpp>

#include <DataSeries/GeneralField.hpp>
#include <DataSeries/IndexSourceModule.hpp>

/** SortedIndexModule assumes that for each file referenced by the
    index, the index field is sorted for that file.  I.e. we can have
    two files which overlap in the ranges of the index field, but each
    file has to be sorted (at least in the index).  It is an error to
    violate this rule. TODO-aveitch: make this better */
class SortedIndexModule : public IndexSourceModule {
public:
    /** Create a new SortedIndexModule
	@param index_filename The file containing the index (created by 
	dsextent index)
	@param index_type The type of the extent indexed
	@param fieldname The name of the field to use as index
     */
    SortedIndexModule(const std::string &index_filename,
		      const std::string &index_type,
		      const std::string &fieldname);
    /** Destructor */
    virtual ~SortedIndexModule();

    /** Searches the index, subsequent calls to getExtent will result
	in only those extents that contain the value being searched
	returned.  TODO-aveitch: make this invalid to call unless
	everything has been pulled out.
     */
    void search(const GeneralValue &value);

protected:
    virtual PrefetchExtent *lockedGetCompressedExtent();
    virtual void lockedResetModule();

private:
    // IndexEntry describes a single extent in the index
    struct IndexEntry {
	boost::shared_ptr<DataSeriesSource> source;
	GeneralValue minv;	// min value of index field in extent
	GeneralValue maxv;	// max value of index field in extent
	uint64_t offset;	// offset of extent in source
	IndexEntry(boost::shared_ptr<DataSeriesSource> source,
		   const GeneralValue &minv, const GeneralValue &maxv, 
		   uint64_t offset) 
	    : source(source), minv(minv), maxv(maxv), offset(offset) 
	{ }

	// Consider the following entry values for minv, maxv:
	// 
	// [ 1, 4 ]
	// [ 5, 7 ]
	// [ 7, 11 ]
	//
	// When we search for 7, we want to find the first extent
	// containing 7, which means that we have to compare based on
	// maxv rather than minv.
	bool operator<(const GeneralValue &rhs) const {
	    return maxv < rhs;
	}

	bool inRange(const GeneralValue &v) const {
	    return v >= minv && v <= maxv;
	}
    };

    typedef std::vector<IndexEntry> IndexEntryVector;

    size_t cur_extent;		        // current extent being processed, indexes into extents
    const std::string index_type;	// type of extent indexed
    std::vector<IndexEntryVector> index;// one index for each indexed file
    std::vector<IndexEntry *> extents;	// extents that contain searched value
};

#endif
