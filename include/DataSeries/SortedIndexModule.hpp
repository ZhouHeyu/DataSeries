/*
   (c) Copyright 2009, Hewlett-Packard Development Company, LP

   See the file named COPYING for license details
*/

/** @file
    A module which uses the min/max index generated by dsextentindex to 
    pick out the appropriate extents. Unlike MinMaxIndex, assumes that the
    file is completely sorted, and maintains index in memory.
    // TODO-brad/alistair: I assume it verifies that the file is sorted.  
*/

#ifndef __DATASERIES_SORTEDINDEXMODULE_H
#define __DATASERIES_SORTEDINDEXMODULE_H

#include <DataSeries/IndexSourceModule.hpp>
#include <DataSeries/GeneralField.hpp>

class SortedIndexModule : public IndexSourceModule {
public:
    SortedIndexModule(const std::string &index_filename,
		      const std::string &index_type,
		      const std::string &fieldname);
    // TODO-brad/alistair: shouldn't this be lookup (GV)?
    void lookup(int64_t value);
    virtual ~SortedIndexModule() 
    { };

protected:
    virtual PrefetchExtent *lockedGetCompressedExtent();
    virtual void lockedResetModule();

private:
    void addIndexEntry(const GeneralValue &minv, const GeneralValue &maxv, 
		       uint64_t offset) {
	index_.push_back(IndexEntry(minv, maxv, offset));
    }

    struct IndexEntry {
	// TODO-brad/alistair: coding convention says no _ at end of
	// member variables.  Also since you can only do lookups based
	// on int64, why are you storing things as a general value?
	GeneralValue minv_;	// minimum value
	GeneralValue maxv_;
	uint64_t offset_;
	IndexEntry(const GeneralValue &minv, const GeneralValue &maxv, 
		   uint64_t offset) :
	    minv_(minv),
	    maxv_(maxv),
	    offset_(offset) {
	}

	bool operator<(int64_t rhs) const {
	    return (maxv_.valInt64() < rhs);
	}

	bool inRange(int64_t v) const {
	    return (v >= minv_.valInt64() && v <= maxv_.valInt64());
	}
    };

    DataSeriesSource *source_;
    unsigned cur_extent_;
    const std::string index_type_;
    std::vector<IndexEntry> index_;     /// in-memory index
    std::vector<int64_t> extents_;
    bool firstTime;
    std::string sourceFilename;
};

#endif
