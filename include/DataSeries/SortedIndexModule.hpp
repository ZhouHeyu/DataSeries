/*
   (c) Copyright 2009, Hewlett-Packard Development Company, LP

   See the file named COPYING for license details
*/

/** @file
    A module which uses the min/max index generated by dsextentindex to 
    pick out the appropriate extents. Unlike MinMaxIndex, maintains index 
    in memory, and only builds index on a single value. 
*/

#ifndef __DATASERIES_SORTEDINDEXMODULE_H
#define __DATASERIES_SORTEDINDEXMODULE_H

#include <boost/shared_ptr.hpp>

#include <DataSeries/IndexSourceModule.hpp>
#include <DataSeries/GeneralField.hpp>

class SortedIndexModule : public IndexSourceModule {
public:
    /** Create a new SortedIndexModule
	@param index_filename The file containing the index (created by 
	dsextent index)
	@param index_type The type of the extent indexed
	@param filename The name of the field to use as index
     */
    SortedIndexModule(const std::string &index_filename,
		      const std::string &index_type,
		      const std::string &fieldname);
    /** Searches the index, subsequent calls to getExtent will result in only
	those extents that contain the value being searched returned.
     */
    void search(const GeneralValue &value);
    virtual ~SortedIndexModule();

protected:
    virtual PrefetchExtent *lockedGetCompressedExtent();
    virtual void lockedResetModule();

private:
    // IndexEntry describes a single extent in the index
    struct IndexEntry {
	boost::shared_ptr<DataSeriesSource> source;	// source file
	GeneralValue minv;	// min value of index field in extent
	GeneralValue maxv;	// max value of index field in extent
	uint64_t offset;	// offset of extent in source
	IndexEntry(boost::shared_ptr<DataSeriesSource> source,
		   const GeneralValue &minv, const GeneralValue &maxv, 
		   uint64_t offset) :
	    source(source),
	    minv(minv),
	    maxv(maxv),
	    offset(offset) {
	}

	// note: definition of < uses maxv: this ensures finding the
	// "right" entry when lower_bound is used in the implementation.
	bool operator<(const GeneralValue &rhs) const {
	    return (maxv < rhs);
	}

	bool inRange(const GeneralValue &v) const {
	    return (v >= minv && v <= maxv);
	}
    };

    typedef std::vector<IndexEntry> IndexEntryVector;

    unsigned cur_extent;		// current extent being processed
    const std::string index_type;	// type of extent indexed
    std::vector<IndexEntryVector> index;// one index for each indexed file
    std::vector<IndexEntry*> extents;	// extents that contain searched value
    bool first_time;			// used to indicate first search
};

#endif
